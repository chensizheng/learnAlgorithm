待机（已准备好）投入硬币
转动一把
滑落一颗糖果
待机（售罄）

传统模式，设置一个方法，根据不同的状态返回不同的结果。
传统实现参考CandyMachine
新的需求：有10%的概率可以拿到2颗糖果
思考实现:
    ①多设置一个赢家状态，这个改动很大
    ②转动的时候，加入一个概率函数，也是违背了对修改的关闭。我们应该不修改之前的功能。

思考变化与不变化部分：
    传统设计是以动作为入口，通过状态判断下一步的执行结果；
    我们可以把状态独立出来，在某一个状态下的不同操作，表现不同的行为：把状态包装成行为对象。
    对接口的开发，糖果机里维护的是某个状态的指针（接口）

状态模式的关键点：
    对修改代码关闭，对扩展功能开发，
    变化部分：状态有可能增加
    动作是固定的，隔离的

    对象状态中状态对象的切换。